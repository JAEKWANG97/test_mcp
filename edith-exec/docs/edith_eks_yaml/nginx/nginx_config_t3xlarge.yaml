apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config-t3xlarge
data:
  default.conf: |
    server {
        listen 80;
        server_name edith-ai.xyz;

        # HTTP 요청을 HTTPS로 리다이렉트
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name edith-ai.xyz;

        # Secret에서 가져온 인증서와 키 파일 경로
        ssl_certificate /etc/nginx/certs/tls.crt;
        ssl_certificate_key /etc/nginx/certs/tls.key;

        location /kubetest {
            rewrite ^/kubetest/(.*)$ /$1 break;
            proxy_pass http://kubetest:9190;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            # rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://scg-spring-boot-service:8180;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            keepalive_timeout 600s;            

            # 요청의 Origin 헤더 값을 가져와서 특정 출처만 허용
            set $allowed_origin "";

            if ($http_origin ~* (https://k11c206\.p\.ssafy\.io|http://localhost:5173)) {
                set $allowed_origin $http_origin;
            }

            # CORS 설정 추가
            add_header 'Access-Control-Allow-Origin' $allowed_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # OPTIONS 요청에 대한 처리 (Preflight 요청에 대한 응답)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $allowed_origin;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;
            }         

        }

        location /ws {
            # rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://scg-spring-boot-service:8180;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 요청의 Origin 헤더 값을 가져와서 특정 출처만 허용
            set $allowed_origin "";

            if ($http_origin ~* (https://k11c206\.p\.ssafy\.io|http://localhost:5173)) {
                set $allowed_origin $http_origin;
            }

            # CORS 설정 추가
            add_header 'Access-Control-Allow-Origin' $allowed_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # OPTIONS 요청에 대한 처리 (Preflight 요청에 대한 응답)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $allowed_origin;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;
            }       
        }

        # location /argocd {
        #     proxy_pass http://argo-server:443;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;   
        #     proxy_ssl_verify off;    
        # }
    }