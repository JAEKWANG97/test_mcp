def skipRemainingStages = true

pipeline {
    agent any

    triggers {
        gitlab(
            triggerOnPush: true,
        )
    }

    environment {

        // GitLab
        REPO_URL = 'https://lab.ssafy.com/s11-final/S11P31C206.git'
        CHECKOUT_BRANCH = '*/develop'
        CHECKOUT_FOLDER = 'edith-back'
        SERVER_PORT = '8081'
        SERVER_NAME = 'user'
        APP_TYPE = 'spring-boot-app'

        // AWS
        AWS_REGION = 'ap-northeast-2'
        AWS_ACCESS_KEYS = credentials('AWS_ACCESS_KEYS')
        ECR_URL = credentials('ECR_URL')
        ECR_REPO = 'ssafy/edith'

        // GITHUB
        GITHUB_REPO_URL = 'https://github.com/MJ-Kor/edith_eks_yaml.git'
        GITHUB_ID = 'mj1584.mk@gmail.com'
        GITHUB_NAME = 'MJ-Kor'

        // CI INFO
        PREVIOUS_BUILD_NUMBER = "${Integer.parseInt(env.BUILD_NUMBER) - 1}"
        CURRENT_BUILD_NUMBER = "${env.BUILD_NUMBER}"
        DELETE_IMG_TAG = "${SERVER_NAME}-${APP_TYPE}"
        PREVIOUS_IMG_TAG = "${SERVER_NAME}-${APP_TYPE}-${PREVIOUS_BUILD_NUMBER}"
        CURRENT_IMG_TAG = "${SERVER_NAME}-${APP_TYPE}-${CURRENT_BUILD_NUMBER}"
        YAML_PATH = "${SERVER_NAME}.yaml"
        PROJECT_ROOT = 'project'
        YAML_ROOT = 'yaml'

        // DOCKER
        DOCKER_USERINFO = credentials('DOCKER_USER')
        DOCKER_REPO = credentials('DOCKER_REPO')

        // SPRING
        SPRING_JWT_SECRET = credentials('SPRING_JWT_SECRET')
    }

    stages {
        stage('Checkout Project Code') {
            steps {
                dir('project'){
                    checkout([$class: 'GitSCM',
                        branches: [[name: "${CHECKOUT_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: "${REPO_URL}",
                            credentialsId: 'GitLab_Personal_Access_Token'
                        ]],
                        extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: "${SERVER_NAME}/"]]]]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps {
                script {
                    skipRemainingStages = false
                    sh """
                    cd ${PROJECT_ROOT}/${CHECKOUT_FOLDER}/${SERVER_NAME}
                    chmod +x ./gradlew
                    ./gradlew clean build -x test
                    docker build -t ${SERVER_NAME}-${APP_TYPE}:latest --build-arg JAR_FILE=build/libs/${SERVER_NAME}-0.0.1-SNAPSHOT.jar .
                    docker tag ${SERVER_NAME}-${APP_TYPE}:latest ${ECR_URL}/${ECR_REPO}:${CURRENT_IMG_TAG}
                    """
                }
            }
        }

        stage('Login to ECR') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps {
                script {
                    sh """
                    aws configure set aws_access_key_id ${AWS_ACCESS_KEYS_USR}
                    aws configure set aws_secret_access_key ${AWS_ACCESS_KEYS_PSW}
                    aws configure set region ${AWS_REGION}
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                    """
                }
            }
        }

        stage('Delete Previous Docker Image from ECR') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps {
                script {
                    // 1. AWS 명령어를 통해 이미지 태그들을 가져옴
                    def tags = sh(
                        script: "aws ecr list-images --repository-name ${ECR_REPO} --query 'imageIds[*].imageTag' --output text",
                        returnStdout: true
                    ).trim()

                    // 2. 가져온 태그들에서 특정 접두사로 시작하는 태그들만 필터링
                    def filteredTags = tags.tokenize().findAll { it.startsWith(DELETE_IMG_TAG) }

                    // 필터링된 태그 출력
                    echo "Filtered tags: ${filteredTags}"

                    // 3. 필터링된 태그가 있을 경우 삭제 진행
                    if (filteredTags) {
                        filteredTags.each { tag ->
                            echo "Deleting image with tag: ${tag}"
                            sh "aws ecr batch-delete-image --repository-name ${ECR_REPO} --image-ids imageTag=${tag}"
                        }
                    } else {
                        echo "No images found with prefix '${DELETE_IMG_TAG}', skipping deletion."
                    }
                }
            }
        }

        stage('Push Docker Image to ECR') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps {
                script {
                    sh """
                    docker push ${ECR_URL}/${ECR_REPO}:${CURRENT_IMG_TAG}
                    docker rmi ${SERVER_NAME}-${APP_TYPE}:latest || true
                    docker rmi ${ECR_URL}/${ECR_REPO}:${CURRENT_IMG_TAG}
                    """
                }
            }
        }

        stage ('Get Yaml Repository') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps {
                dir('yaml'){
                    git credentialsId: 'GITHUB_USER',
                    url: "${GITHUB_REPO_URL}",
                    branch: 'master'
                }
            }
        }
        stage('Setting .yaml File') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'GITHUB_USER', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                        sh """
                        git config --global user.email ${GITHUB_ID}
                        git config --global user.name ${GITHUB_NAME}
                        cd ${YAML_ROOT}/${SERVER_NAME}
                        sed -i 's|image: \\(.*\\):[^ ]*|image: \\1:${CURRENT_IMG_TAG}|' ${YAML_PATH}
                        git add .
                        git commit -m 'fix: Update image tag to ${CURRENT_IMG_TAG}'
                        git push https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@${GITHUB_REPO_URL.replace('https://','')}
                        """
                    }
                }
            }
        }

        stage('Logout from ECR') {
            when {
                changeset "${CHECKOUT_FOLDER}/${SERVER_NAME}/**"
            }
            steps{
                script {
                    sh """
                    docker logout ${ECR_URL}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished!'
        }
        success {
            script{
                if (skipRemainingStages) {
                    echo "No changes in ${SERVER_NAME} folder, skipping build and deploy."
                } else {
                    echo "CI successfully on ${SERVER_NAME} server!"
                    def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                    mattermostSend (
                        color: 'good',
                        message: "${user}님의 ${env.JOB_NAME} 서버 CI 성공. (#${env.BUILD_NUMBER}) ",
                    )
                }
            }
        }
        failure {
            echo 'CI failed!'
            script{
                def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                mattermostSend (
                    color: 'danger',
                    message: "${user}님? ${env.JOB_NAME} 서버 CI 실패했는데요? (#${env.BUILD_NUMBER}) ",
                )
            }
        }
    }
}